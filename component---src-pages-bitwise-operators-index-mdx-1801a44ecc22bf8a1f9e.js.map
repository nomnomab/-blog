{"version":3,"sources":["webpack:///./src/pages/bitwise-operators/index.mdx","webpack:///./src/components/blog-layout.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","pageContext","frontmatter","date","inProgress","href","id","target","parentName","className","interval","springConfig","stiffness","damping","children","svgPath","isMDXComponent","BlogLayout","path","description","ogTitle","ogDescription","ogUrl","_objectWithoutPropertiesLoose","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf"],"mappings":"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","file":"component---src-pages-bitwise-operators-index-mdx-1801a44ecc22bf8a1f9e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/nomnom/blog/src/components/blog-layout.js\";\nimport TextLoop from \"react-text-loop\";\nimport Titlebar from \"../../components/blog-title\";\nimport BlogTableOfContentsItem from \"../../components/blog-table-of-contents-item\";\nimport BlogSvg from \"../../components/blog-svg\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Titlebar title={props.pageContext.frontmatter.title} date={props.pageContext.frontmatter.date} inProgress={true} mdxType=\"Titlebar\">\n  <BlogTableOfContentsItem href=\"#general-information\" title=\"General Information\" mdxType=\"BlogTableOfContentsItem\" />\n  <BlogTableOfContentsItem href=\"#bit-operations\" title=\"Bit Operations\" mdxType=\"BlogTableOfContentsItem\" />\n    </Titlebar>\n    <h3 id=\"general-information\">General Information</h3>\n    <p>{`Before we get into anything hairy, let's define a bit:`}</p>\n    <blockquote>\n  A bit (short for \"binary digit\") is the smallest unit of measurement used to\n  quantify computer data. It contains a single binary value of 0 or 1. (\n  <a href=\"https://techterms.com/definition/bit\" target=\"_blank\">\n    TechTerms\n  </a>\n  )\n    </blockquote>\n    <p>{`Ok, great, but why is this so useful? Well, anything that exists on your computer is made up of these small bits.`}</p>\n    <p>{`Just take a look at some of the basic data types of C#:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Range`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Size in bits`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`byte`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`0 to 255`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`8 bits`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`short`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-32,768 to 32,767`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`16 bits`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-2,147,483,648 to 2,147,483,647`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`32 bits`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`long`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`64 bits`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`To accompany those data types, here are some bit representations of a few values:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Bit representation`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`byte`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`0001 0000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`short`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`2,048`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`0000 1000 0000 0000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`150,256,218`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`1000 1111 0100 1011 1010 0101 1010`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`long`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`200,681,912,321`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`0010 1110 1011 1001 1001 0010 1111 1000 0000 0001`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The way you can determine what bit value represents a number is through a method I call bit sliding. Let's look at what I mean:`}</p>\n    <div className=\"bit-example\">\n  <div>\n    <TextLoop className=\"text-loop\" interval={1500} springConfig={{\n          stiffness: 340,\n          damping: 50\n        }} children={[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]} mdxType=\"TextLoop\" />{\" \"}\n  </div>\n  <span>equates to </span>\n  <div>\n    <TextLoop className=\"text-loop\" interval={1500} springConfig={{\n          stiffness: 340,\n          damping: 50\n        }} children={[\"0000\", \"0001\", \"0010\", \"0011\", \"0100\", \"0101\", \"0110\", \"0111\", \"1000\", \"1001\", \"1010\", \"1011\", \"1100\"]} mdxType=\"TextLoop\" />\n  </div>\n    </div>\n    <p>{`Basically a bit will go through this process:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The bit moves one spot to the left`}</li>\n      <li parentName=\"ol\">{`It will check the right slots for any zeroes`}</li>\n      <li parentName=\"ol\">{`If a zero is found, repeat steps one and two`}</li>\n      <li parentName=\"ol\">{`Once there are no more zeroes, the bit furthest to the left will advance one spot to the left`}</li>\n      <li parentName=\"ol\">{`The bits to the right of it will zero out`}</li>\n      <li parentName=\"ol\">{`Repeat the previous steps until the desired number is reached`}</li>\n    </ol>\n    <p>{`Now, let's play around with some bits now that you have a general idea of what one is.`}</p>\n    <h3 id=\"bit-operations\">Bit Operations</h3>\n    <p>{`When dealing with bits you have various operators. These operators manipulate bits by moving them around, or flipping their values. Let's see what they look like.`}</p>\n    <h4>OR</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`OR`}</inlineCode>{` operator is a simple one to understand. All it does is that it copies bits that exist in either operand.`}</p>\n    <p>{`Let's look at an example: `}<inlineCode parentName=\"p\">{`0001 OR 1000 = 1001`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`1 OR 8 = 9`}</inlineCode>{`). As you can see, the bits from both operands get copied into the output.`}</p>\n    <BlogSvg svgPath=\"../assets/planet-black.png\" mdxType=\"BlogSvg\" />\n    <h4>AND</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`AND`}</inlineCode>{` operator is another simple one. The way it works is that if a bit is shared between the operands, then it gets copied.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`0101 AND 0110 = 0100`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`5 AND 6 = 4`}</inlineCode>{`).`}</p>\n    <h4>XOR</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`XOR`}</inlineCode>{` operator basically checks for bits that are unique to each bitset.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`1001 XOR 0110 = 1111`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`9 XOR 6 = 15`}</inlineCode>{`).`}</p>\n    <h4>NAND</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NAND`}</inlineCode>{` operator checks for shared bits from both operands and these bits equal zero.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`1010 NAND 1110 = 0101`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`10 NAND 14 = 5`}</inlineCode>{`).`}</p>\n    <h4>NOR</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NOR`}</inlineCode>{` operator is similar to `}<inlineCode parentName=\"p\">{`NAND`}</inlineCode>{` in the sense that is also checks for shared bits. When shared bits are found, it returns the inverse value.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`1010 NOR 1110 = 0001`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`10 NOR 14 = 1`}</inlineCode>{`).`}</p>\n    <h4>NOT</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`NOT`}</inlineCode>{` operator just flips every bit.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`NOT 1111 = 0000`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`NOT 15 = 0`}</inlineCode>{`).`}</p>\n    <h4>Left Shift</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Left Shift`}</inlineCode>{` operator shifts every bit to the left by the amount of the right operand.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`0011 << 1 = 0110`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`3 << 1 = 6`}</inlineCode>{`).`}</p>\n    <h4>Right Shift</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Right Shift`}</inlineCode>{` operator does the opposite of the `}<inlineCode parentName=\"p\">{`Left Shift`}</inlineCode>{`. It shifts every bit to the right by the amount of the right operand.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`0011 >> 1 = 0001`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`3 >> 1 = 1`}</inlineCode>{`).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"./layout\"\n\nexport default function BlogLayout({ path, children, pageContext }) {\n  const { title, description } = pageContext.frontmatter\n\n  return (\n    <Layout\n      title={title}\n      ogTitle={title}\n      ogDescription={description}\n      ogUrl={path}\n    >\n      {children}\n    </Layout>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}