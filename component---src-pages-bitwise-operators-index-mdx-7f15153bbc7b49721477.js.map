{"version":3,"sources":["webpack:///./src/pages/bitwise-operators/index.mdx","webpack:///./src/components/blog-layout.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","children","data","useStaticQuery","to","className","site","siteMetadata","title","MDXContent","components","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","mdxType","pageContext","frontmatter","date","parentName","interval","isMDXComponent"],"mappings":"oQAUaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,ECVS,YAA+B,IAAbC,EAAY,EAAZA,SACzBC,EAAOC,YAAe,cAU5B,OACE,6BACE,gCACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAAU,QACrB,4BAAKH,EAAKI,KAAKC,aAAaC,SAGhC,yBAAKH,UAAU,WAAWJ,KDPjB,SAASQ,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EEjBU,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EFMN,mBACD,OAAO,YAAChB,EAAD,iBAAeD,EAAiBY,EAAhC,CAAuCD,WAAYA,EAAYY,QAAQ,cAI5E,YAAC,IAAD,CAAUd,MAAOG,EAAMY,YAAYC,YAAYhB,MAAOiB,KAAMd,EAAMY,YAAYC,YAAYC,KAAMH,QAAQ,aACxG,kJACA,8BACE,iBAAGI,WAAW,cAAd,yEAEF,6MACA,gFACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,kBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,YAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,WAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,qBAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,YAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,mCAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,YAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,2DAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,cAMN,sFACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,wBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,MAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,cAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,wBAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,eAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,uCAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,mBAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,UADX,wDAMN,wJACA,mBAAKrB,UAAU,eACjB,YAAC,IAAD,CAAUsB,SAAU,KAAM1B,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,MAAOqB,QAAQ,aAAc,IAChI,uCACA,YAAC,IAAD,CAAUK,SAAU,KAAM1B,SAAU,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAASqB,QAAQ,cAEpJ,mOACA,gHAKJb,EAAWmB,gBAAiB","file":"component---src-pages-bitwise-operators-index-mdx-7f15153bbc7b49721477.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/nomnom/blog/src/components/blog-layout.js\";\nimport TextLoop from \"react-text-loop\";\nimport Titlebar from \"../../components/blog-title\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Titlebar title={props.pageContext.frontmatter.title} date={props.pageContext.frontmatter.date} mdxType=\"Titlebar\"></Titlebar>\n    <p>{`So, you want to delve into the realm of bits? Well, let's get into it. Now, you may be asking: \"What exactly is a bit?\".`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A bit is a single value that indicates 1 or 0, or rather, on or off.`}</p>\n    </blockquote>\n    <p>{`Ok, great, but why is this so useful? Well, everything on your computer is basically a collection of bits. Yes, everything. Every number, name, image, and color is made up of bits.`}</p>\n    <p>{`Just take a look at some of the basic data types of C#:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Range`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Size in bits`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`byte`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`0 to 255`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`8 bits`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`short`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-32,768 to 32,767`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`16 bits`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-2,147,483,648 to 2,147,483,647`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`32 bits`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`long`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`64 bits`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Let's look at some example values and their bit equivalences:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Bit representation`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`byte`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`16`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`0001 0000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`short`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`2,048`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`0000 1000 0000 0000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`150,256,218`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`1000 1111 0100 1011 1010 0101 1010`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`long`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`200,681,912,321`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`0010 1110 1011 1001 1001 0010 1111 1000 0000 0001`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The way you can determine what bit value represents a number is through a method I call bit sliding. Let's look at what I mean:`}</p>\n    <div className=\"bit-example\">\n  <TextLoop interval={1500} children={[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]} mdxType=\"TextLoop\" />{\" \"}\n  <span>equates to </span>\n  <TextLoop interval={1500} children={[\"0000\", \"0001\", \"0010\", \"0011\", \"0100\", \"0101\", \"0110\", \"0111\", \"1000\", \"1001\", \"1010\", \"1011\", \"1100\"]} mdxType=\"TextLoop\" />\n    </div>\n    <p>{`Basically, a bit will come in from the right, each iteration afterwards will fill the remaining bits, then the bit will slide to the left, and then this process repeats for the next numbers in sequence.`}</p>\n    <p>{`Now, let's play around with them considering you have a general idea of what a bit is.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport Titlebar from \"./blog-title\"\n\nexport default function Layout({ children }) {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <div>\n      <header>\n        <Link to=\"/\" className=\"link\">\n          <h3>{data.site.siteMetadata.title}</h3>\n        </Link>\n      </header>\n      <div className=\"content\">{children}</div>\n    </div>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}