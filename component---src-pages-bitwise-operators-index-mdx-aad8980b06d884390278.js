(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{Bl7J:function(e,t,a){"use strict";a.d(t,"a",(function(){return l}));var n=a("q1tI"),r=a.n(n);a("Wbzz");function b(){return r.a.createElement("div",{className:"footer"},r.a.createElement("p",{className:"center-text"},"Andrew Burke Â© 2020"),r.a.createElement("div",{className:"center-div"},r.a.createElement("a",{className:"logo github",href:"https://github.com/nomnomab",target:"_blank"}),r.a.createElement("a",{className:"logo gist",href:"https://gist.github.com/nomnomab",target:"_blank"})))}var i=a("qhky");function l(e){var t=e.title,a=e.ogTitle,n=e.ogDescription,l=e.ogUrl,o=e.children;return r.a.createElement("div",null,r.a.createElement("div",{className:"application"},r.a.createElement(i.a,{title:t},r.a.createElement("meta",{charSet:"utf-8"}),r.a.createElement("meta",{property:"og:type",content:"website"}),r.a.createElement("meta",{property:"og:site_name",content:"Nomnom's Blog"}),r.a.createElement("meta",{property:"og:title",content:a}),r.a.createElement("meta",{property:"og:description",content:n}),r.a.createElement("meta",{property:"og:url",content:l}),r.a.createElement("meta",{name:"twitter:card",content:"summary"}),r.a.createElement("meta",{name:"twitter:creator",content:"Andrew Burke"}))),r.a.createElement("header",{className:"header"},r.a.createElement("a",{className:"site-icon",href:"/blog"})),r.a.createElement("div",{className:"content"},o," ",r.a.createElement(b,null)))}},R45Z:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return O}));var n=a("q1tI"),r=a.n(n),b=a("7ljp"),i=(a("Wbzz"),a("Bl7J"));var l=a("hCLT"),o=a("0b/w"),c=a("1UO4"),s={},p={_frontmatter:s},m=function(e){var t=e.path,a=e.children,n=e.pageContext.frontmatter,b=n.title,l=n.description;return r.a.createElement(i.a,{title:b,ogTitle:b,ogDescription:l,ogUrl:t},a)};function O(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(b.b)(m,Object.assign({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)(o.a,{title:a.pageContext.frontmatter.title,date:a.pageContext.frontmatter.date,inProgress:!0,mdxType:"Titlebar"},Object(b.b)(c.a,{href:"#general-information",title:"General Information",mdxType:"BlogTableOfContentsItem"}),Object(b.b)(c.a,{href:"#bit-operations",title:"Bit Operations",mdxType:"BlogTableOfContentsItem"})),Object(b.b)("h3",{id:"general-information"},"General Information"),Object(b.b)("p",null,"Before we get into anything hairy, let's define a bit:"),Object(b.b)("blockquote",null,'A bit (short for "binary digit") is the smallest unit of measurement used to quantify computer data. It contains a single binary value of 0 or 1. (',Object(b.b)("a",{href:"https://techterms.com/definition/bit",target:"_blank"},"TechTerms"),")"),Object(b.b)("p",null,"Ok, great, but why is this so useful? Well, anything that exists on your computer is made up of these small bits."),Object(b.b)("p",null,"Just take a look at some of the basic data types of C#:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Range"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:"right"}),"Size in bits"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"byte"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"0 to 255"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"8 bits")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"short"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"-32,768 to 32,767"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"16 bits")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"int"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"-2,147,483,648 to 2,147,483,647"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"32 bits")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"long"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"64 bits")))),Object(b.b)("p",null,"To accompany those data types, here are some bit representations of a few values:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Value"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:"right"}),"Bit representation"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"byte"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"16"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"0001 0000")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"short"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"2,048"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"0000 1000 0000 0000")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"int"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"150,256,218"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"1000 1111 0100 1011 1010 0101 1010")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"long"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"center"}),"200,681,912,321"),Object(b.b)("td",Object.assign({parentName:"tr"},{align:"right"}),"0010 1110 1011 1001 1001 0010 1111 1000 0000 0001")))),Object(b.b)("p",null,"The way you can determine what bit value represents a number is through a method I call bit sliding. Let's look at what I mean:"),Object(b.b)("div",{className:"bit-example"},Object(b.b)("div",null,Object(b.b)(l.a,{className:"text-loop",interval:1500,springConfig:{stiffness:340,damping:50},children:["0","1","2","3","4","5","6","7","8","9","10","11","12"],mdxType:"TextLoop"})," "),Object(b.b)("span",null,"equates to "),Object(b.b)("div",null,Object(b.b)(l.a,{className:"text-loop",interval:1500,springConfig:{stiffness:340,damping:50},children:["0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100"],mdxType:"TextLoop"}))),Object(b.b)("p",null,"Basically a bit will go through this process:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"The bit moves to the left one spot"),Object(b.b)("li",{parentName:"ol"},"It will check the right slots for any zeroes"),Object(b.b)("li",{parentName:"ol"},"If a zero is found, repeat steps one and two"),Object(b.b)("li",{parentName:"ol"},"Once there are no more zeroes, the bit furthest to the left will advance one spot to the left"),Object(b.b)("li",{parentName:"ol"},"The bits to the right of it will zero out"),Object(b.b)("li",{parentName:"ol"},"Repeat the previous steps until the desired number is reached")),Object(b.b)("p",null,"Now, let's play around with some bits now that you have a general idea of what one is."),Object(b.b)("h3",{id:"bit-operations"},"Bit Operations"),Object(b.b)("p",null,"When dealing with bits you have various operators. These operators manipulate bits by moving them around, or flipping their values. Let's see what they look like."),Object(b.b)("h4",null,"OR"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"OR")," operator is a simple one to understand. All it does is that it copies bits that exist in either operand."),Object(b.b)("p",null,"Let's look at an example: ",Object(b.b)("inlineCode",{parentName:"p"},"0001 OR 1000 = 1001")," (",Object(b.b)("inlineCode",{parentName:"p"},"1 OR 8 = 9"),"). As you can see, the bits from both operands get copied into the output."),Object(b.b)("h4",null,"AND"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"AND")," operator is another simple one. The way it works is that if a bit is shared between the operands, then it gets copied."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"0101 AND 0110 = 0100")," (",Object(b.b)("inlineCode",{parentName:"p"},"5 AND 6 = 4"),")."),Object(b.b)("h4",null,"XOR"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"XOR")," operator basically checks for bits that are unique to each bitset."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"1001 XOR 0110 = 1111")," (",Object(b.b)("inlineCode",{parentName:"p"},"9 XOR 6 = 15"),")."),Object(b.b)("h4",null,"NAND"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"NAND")," operator checks for shared bits from both operands and these bits equal zero."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"1010 NAND 1110 = 0101")," (",Object(b.b)("inlineCode",{parentName:"p"},"10 NAND 14 = 5"),")."),Object(b.b)("h4",null,"NOR"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"NOR")," operator is similar to ",Object(b.b)("inlineCode",{parentName:"p"},"NAND")," in the sense that is also checks for shared bits. When shared bits are found, it returns the inverse value."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"1010 NOR 1110 = 0001")," (",Object(b.b)("inlineCode",{parentName:"p"},"10 NOR 14 = 1"),")."),Object(b.b)("h4",null,"NOT"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"NOT")," operator just flips every bit."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"NOT 1111 = 0000")," (",Object(b.b)("inlineCode",{parentName:"p"},"NOT 15 = 0"),")."),Object(b.b)("h4",null,"Left Shift"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"Left Shift")," operator shifts every bit to the left by the amount of the right operand."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"0011 << 1 = 0110")," (",Object(b.b)("inlineCode",{parentName:"p"},"3 << 1 = 6"),")."),Object(b.b)("h4",null,"Right Shift"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"Right Shift")," operator does the opposite of the ",Object(b.b)("inlineCode",{parentName:"p"},"Left Shift"),". It shifts every bit to the right by the amount of the right operand."),Object(b.b)("p",null,"For example: ",Object(b.b)("inlineCode",{parentName:"p"},"0011 >> 1 = 0001")," (",Object(b.b)("inlineCode",{parentName:"p"},"3 >> 1 = 1"),")."))}O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-bitwise-operators-index-mdx-aad8980b06d884390278.js.map